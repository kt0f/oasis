From 8ec1f34a8943d175270cbfde3d3a576512e5d2e6 Mon Sep 17 00:00:00 2001
From: Michael Forney <mforney@mforney.org>
Date: Sat, 6 Jul 2019 01:33:01 -0700
Subject: [PATCH] Use __typeof__ spelling of typeof

---
 src/btrfs.c          | 12 ++++++------
 src/defs.h           |  6 +++---
 src/fs_0x94_ioctl.c  |  2 +-
 src/fs_f_ioctl.c     |  2 +-
 src/landlock.c       |  4 ++--
 src/list.h           | 10 +++++-----
 src/macros.h         |  2 +-
 src/tee.c            |  2 +-
 src/ubi.c            |  2 +-
 tests/btrfs.c        |  2 +-
 tests/fcntl-common.c |  2 +-
 11 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/src/btrfs.c b/src/btrfs.c
index 349fee657..c641d2408 100644
--- a/src/btrfs.c
+++ b/src/btrfs.c
@@ -216,7 +216,7 @@ btrfs_print_logical_ino_container(struct tcb *tcp,
 		tprint_more_data_follows();
 	} else {
 		const uint64_t val_addr =
-			inodes_addr + offsetof(typeof(container), val);
+			inodes_addr + offsetof(__typeof__(container), val);
 		uint64_t record[3];
 		tprint_struct_next();
 		tprints_field_name("val");
@@ -257,7 +257,7 @@ btrfs_print_ino_path_container(struct tcb *tcp,
 		tprint_more_data_follows();
 	} else {
 		uint64_t val_addr =
-			fspath_addr + offsetof(typeof(container), val);
+			fspath_addr + offsetof(__typeof__(container), val);
 		uint64_t offset;
 		tprint_struct_next();
 		tprints_field_name("val");
@@ -298,7 +298,7 @@ btrfs_print_qgroup_inherit(struct tcb *const tcp, const kernel_ulong_t qgi_addr)
 		uint64_t record;
 		tprint_struct_next();
 		tprints_field_name("qgroups");
-		print_array(tcp, qgi_addr + offsetof(typeof(inherit), qgroups),
+		print_array(tcp, qgi_addr + offsetof(__typeof__(inherit), qgroups),
 			    inherit.num_qgroups, &record, sizeof(record),
 			    tfetch_mem, print_uint_array_member, 0);
 	}
@@ -1169,7 +1169,7 @@ MPERS_PRINTER_DECL(int, btrfs_ioctl,
 		PRINT_FIELD_OBJ_PTR(args, key,
 				    print_btrfs_ioctl_search_key,
 				    entering(tcp), !abbrev(tcp));
-		decode_search_arg_buf(tcp, arg + offsetof(typeof(args), buf),
+		decode_search_arg_buf(tcp, arg + offsetof(__typeof__(args), buf),
 				      sizeof(args.buf), args.key.nr_items);
 		tprint_struct_end();
 		if (entering(tcp))
@@ -1205,7 +1205,7 @@ MPERS_PRINTER_DECL(int, btrfs_ioctl,
 				    entering(tcp), !abbrev(tcp));
 		tprint_struct_next();
 		PRINT_FIELD_U(args, buf_size);
-		decode_search_arg_buf(tcp, arg + offsetof(typeof(args), buf),
+		decode_search_arg_buf(tcp, arg + offsetof(__typeof__(args), buf),
 				      args.buf_size, args.key.nr_items);
 		tprint_struct_end();
 		if (entering(tcp))
@@ -1283,7 +1283,7 @@ MPERS_PRINTER_DECL(int, btrfs_ioctl,
 			struct btrfs_ioctl_space_info info;
 			tprint_struct_next();
 			tprints_field_name("spaces");
-			print_array(tcp, arg + offsetof(typeof(args), spaces),
+			print_array(tcp, arg + offsetof(__typeof__(args), spaces),
 				    args.total_spaces,
 				    &info, sizeof(info), tfetch_mem,
 				    print_btrfs_ioctl_space_info, 0);
diff --git a/src/defs.h b/src/defs.h
index 861b667ff..c44935796 100644
--- a/src/defs.h
+++ b/src/defs.h
@@ -1120,7 +1120,7 @@ print_local_array_ex(struct tcb *tcp,
 # define print_local_array_upto(tcp_, start_addr_, upto_, print_func_)	     \
 	print_local_array_ex((tcp_), (start_addr_),			     \
 			     CLAMP((upto_), 0,				     \
-				   (typeof(upto_)) ARRAY_SIZE(start_addr_)), \
+				   (__typeof__(upto_)) ARRAY_SIZE(start_addr_)), \
 			     sizeof((start_addr_)[0]), (print_func_),        \
 			     NULL, 0, NULL, NULL)
 
@@ -1986,8 +1986,8 @@ scno_pers_is_valid(kernel_ulong_t scno, unsigned int pers)
 
 # define ILOG2_ITER_(val_, ret_, bit_)					\
 	do {								\
-		typeof(ret_) shift_ =					\
-			((val_) > ((((typeof(val_)) 1)			\
+		__typeof__(ret_) shift_ =				\
+			((val_) > ((((__typeof__(val_)) 1)		\
 				   << (1 << (bit_))) - 1)) << (bit_);	\
 		(val_) >>= shift_;					\
 		(ret_) |= shift_;					\
diff --git a/src/fs_0x94_ioctl.c b/src/fs_0x94_ioctl.c
index 7aa170af0..b908ea1fb 100644
--- a/src/fs_0x94_ioctl.c
+++ b/src/fs_0x94_ioctl.c
@@ -94,7 +94,7 @@ decode_file_dedupe_range(struct tcb *const tcp, const kernel_ulong_t arg)
 	if (abbrev(tcp) && range.dest_count > count)
 		limit = &count;
 
-	rc = print_array(tcp, arg + offsetof(typeof(range), info),
+	rc = print_array(tcp, arg + offsetof(__typeof__(range), info),
 			 range.dest_count, &info, sizeof(info),
 			 tfetch_mem,
 			 print_file_dedupe_range_info, limit);
diff --git a/src/fs_f_ioctl.c b/src/fs_f_ioctl.c
index 7b51bc9f9..ee9a42754 100644
--- a/src/fs_f_ioctl.c
+++ b/src/fs_f_ioctl.c
@@ -72,7 +72,7 @@ decode_fiemap(struct tcb *const tcp, const kernel_ulong_t arg)
 		struct fiemap_extent fe;
 		tprint_struct_next();
 		tprints_field_name("fm_extents");
-		print_array(tcp, arg + offsetof(typeof(args), fm_extents),
+		print_array(tcp, arg + offsetof(__typeof__(args), fm_extents),
 			    args.fm_mapped_extents, &fe, sizeof(fe),
 			    tfetch_mem, print_fiemap_extent, 0);
 	}
diff --git a/src/landlock.c b/src/landlock.c
index d3ddb4edb..151bea7af 100644
--- a/src/landlock.c
+++ b/src/landlock.c
@@ -19,7 +19,7 @@ print_landlock_ruleset_attr(struct tcb *tcp, const kernel_ulong_t addr,
 {
 	struct landlock_ruleset_attr attr;
 
-	if (size < offsetofend(typeof(attr), handled_access_fs)) {
+	if (size < offsetofend(__typeof__(attr), handled_access_fs)) {
 		printaddr(addr);
 		return;
 	}
@@ -31,7 +31,7 @@ print_landlock_ruleset_attr(struct tcb *tcp, const kernel_ulong_t addr,
 	PRINT_FIELD_FLAGS(attr, handled_access_fs, landlock_ruleset_access_fs,
 			  "LANDLOCK_ACCESS_FS_???");
 
-	if (size > offsetofend(typeof(attr), handled_access_fs)) {
+	if (size > offsetofend(__typeof__(attr), handled_access_fs)) {
 		tprint_arg_next();
 		tprint_more_data_follows();
 	}
diff --git a/src/list.h b/src/list.h
index 4de4cb3be..f4ec11f0e 100644
--- a/src/list.h
+++ b/src/list.h
@@ -158,7 +158,7 @@ list_is_empty(const struct list_item *l)
  * @param field Name of the field that holds the respective struct list_item.
  */
 # define list_next(var, field) \
-	list_elem((var)->field.next, typeof(*(var)), field)
+	list_elem((var)->field.next, __typeof__(*(var)), field)
 /**
  * Get the previous element in a list.
  *
@@ -166,7 +166,7 @@ list_is_empty(const struct list_item *l)
  * @param field Name of the field that holds the respective struct list_item.
  */
 # define list_prev(var, field) \
-	list_elem((var)->field.prev, typeof(*(var)), field)
+	list_elem((var)->field.prev, __typeof__(*(var)), field)
 
 /**
  * Insert an item into a list. The item is placed as the next list item
@@ -280,7 +280,7 @@ list_replace(struct list_item *old, struct list_item *new)
  *               inside list items.
  */
 # define list_foreach(var_, head_, field_) \
-	for (var_ = list_elem((head_)->next, typeof(*var_), field_); \
+	for (var_ = list_elem((head_)->next, __typeof__(*var_), field_); \
 	    &(var_->field_) != (head_); var_ = list_next(var_, field_))
 
 /**
@@ -293,8 +293,8 @@ list_replace(struct list_item *old, struct list_item *new)
  * @param _tmp   Temporary variable for storing pointer to the next item.
  */
 # define list_foreach_safe(var_, head_, field_, _tmp) \
-	for (var_ = list_elem((head_)->next, typeof(*var_), field_), \
-	    _tmp = list_elem((var_)->field_.next, typeof(*var_), field_); \
+	for (var_ = list_elem((head_)->next, __typeof__(*var_), field_), \
+	    _tmp = list_elem((var_)->field_.next, __typeof__(*var_), field_); \
 	    &var_->field_ != head_; var_ = _tmp, _tmp = list_next(_tmp, field_))
 
 #endif /* !STRACE_LIST_H */
diff --git a/src/macros.h b/src/macros.h
index 659d47191..57a0123b4 100644
--- a/src/macros.h
+++ b/src/macros.h
@@ -62,7 +62,7 @@
 
 # define sizeof_field(type_, member_) (sizeof(((type_ *)0)->member_))
 
-# define typeof_field(type_, member_) typeof(((type_ *)0)->member_)
+# define typeof_field(type_, member_) __typeof__(((type_ *)0)->member_)
 
 # ifndef offsetofend
 #  define offsetofend(type_, member_)	\
diff --git a/src/tee.c b/src/tee.c
index d7e9b15d9..fc735e0da 100644
--- a/src/tee.c
+++ b/src/tee.c
@@ -33,7 +33,7 @@ struct tee_ioctl_shm_register_fd_data {
 
 #define TEE_FETCH_BUF_DATA(buf_, arg_, params_) \
 	tee_fetch_buf_data(tcp, arg, &buf_, sizeof(arg_), \
-			   &arg_, offsetof(typeof(arg_), num_params), \
+			   &arg_, offsetof(__typeof__(arg_), num_params), \
 			   params_)
 
 /* session id is printed as 0x%x in libteec */
diff --git a/src/ubi.c b/src/ubi.c
index bd2d2811e..ff9f88cd0 100644
--- a/src/ubi.c
+++ b/src/ubi.c
@@ -76,7 +76,7 @@ static bool
 print_ubi_rnvol_req_ent_array_member(struct tcb *tcp, void *elem_buf,
 				     size_t elem_size, void *data)
 {
-	typeof(&((struct ubi_rnvol_req *) NULL)->ents[0]) p = elem_buf;
+	__typeof__(&((struct ubi_rnvol_req *) NULL)->ents[0]) p = elem_buf;
 
 	tprint_struct_begin();
 	PRINT_FIELD_D(*p, vol_id);
diff --git a/tests/btrfs.c b/tests/btrfs.c
index 867d93213..12ae01545 100644
--- a/tests/btrfs.c
+++ b/tests/btrfs.c
@@ -876,7 +876,7 @@ btrfs_print_tree_search_buf(struct btrfs_ioctl_search_key *key,
 		printf("buf=[");
 		for (uint64_t i = 0; i < key->nr_items; ++i) {
 			struct btrfs_ioctl_search_header *sh;
-			sh = (typeof(sh))(buf + off);
+			sh = (__typeof__(sh))(buf + off);
 			if (i)
 				printf(", ");
 			printf("{transid=%" PRI__u64 ", objectid=",
diff --git a/tests/fcntl-common.c b/tests/fcntl-common.c
index 20f92dd1d..aa6ecc8f5 100644
--- a/tests/fcntl-common.c
+++ b/tests/fcntl-common.c
@@ -28,7 +28,7 @@
 #endif
 
 #ifdef HAVE_TYPEOF
-# define TYPEOF_FLOCK_OFF_T typeof(((struct flock *) NULL)->l_len)
+# define TYPEOF_FLOCK_OFF_T __typeof__(((struct flock *) NULL)->l_len)
 #else
 # define TYPEOF_FLOCK_OFF_T off_t
 #endif
-- 
2.37.3

